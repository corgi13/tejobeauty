version: "3.8"

services:
  # PostgreSQL Database - Croatian Production
  postgres:
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_USER_PASSWORD: ${BACKUP_USER_PASSWORD}
      MONITOR_USER_PASSWORD: ${MONITOR_USER_PASSWORD}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      # Croatian timezone
      TZ: Europe/Zagreb
      # Croatian timezone and locale
      TZ: Europe/Zagreb
      LANG: hr_HR.UTF-8
      LC_ALL: hr_HR.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    networks:
      - tejo-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  # Redis Cache
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    volumes:
      - redis_data:/data
      - redis_backups:/backups
    networks:
      - tejo-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: https://${DOMAIN}
      PORT: 3002
      # Croatian specific settings
      TZ: Europe/Zagreb
      DEFAULT_LOCALE: hr
      DEFAULT_CURRENCY: EUR
      CROATIA_TAX_ENABLED: true
      CROATIA_SHIPPING_ENABLED: true
    networks:
      - tejo-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/api/system-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://${DOMAIN}/api
      NEXT_PUBLIC_FRONTEND_URL: https://${DOMAIN}
      PORT: 3000
      # Croatian specific settings
      TZ: Europe/Zagreb
      NEXT_PUBLIC_DEFAULT_LOCALE: hr
      NEXT_PUBLIC_DEFAULT_CURRENCY: EUR
      NEXT_PUBLIC_CROATIA_FEATURES: true
    networks:
      - tejo-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    environment:
      DOMAIN: ${DOMAIN}
      ENABLE_LETSENCRYPT: true
    volumes:
      - nginx_ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
      - certbot_webroot:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    networks:
      - tejo-network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  redis_backups:
    driver: local
  nginx_ssl:
    driver: local
  nginx_logs:
    driver: local
  certbot_webroot:
    driver: local

networks:
  tejo-network:
    driver: bridge
